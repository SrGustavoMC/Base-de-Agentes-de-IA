# Guia de Implementação: Framework de Agentes de IA com Gemini e GitHub

**Versão 1.0**
**Data:** 24 de junho de 2025

---

## 1. Introdução

Este documento detalha o processo completo para configurar, personalizar e executar um framework de múltiplos agentes de IA usando a API Google Gemini, com versionamento de código no GitHub.

## 2. Pré-requisitos

Antes de iniciar, garanta que os seguintes componentes estejam prontos:
* **Conta no GitHub:** Essencial para hospedagem e versionamento do código.
* **Git Instalado:** Ferramenta para controle de versão local.
* **Python (versão 3.8+):** Linguagem de programação do projeto.
* **Chave de API do Google Gemini:** Credencial de acesso aos modelos de IA, obtida no Google AI Studio.

## 3. Configuração do Repositório GitHub

1.  **Criação:** No GitHub, crie um novo repositório.
2.  **Nomeclatura:** Utilize um nome descritivo (ex: `projeto-agentes-gemini`).
3.  **Configurações Iniciais:** Ao criar, selecione as seguintes opções:
    * **Adicionar um arquivo README:** Para a descrição do projeto.
    * **Adicionar .gitignore:** Selecione o template **Python**. Esta ação é crucial para evitar o envio de arquivos sensíveis e desnecessários para o repositório público.

## 4. Configuração do Ambiente de Desenvolvimento Local

1.  **Clonagem do Repositório:**
    ```bash
    git clone <URL_DO_SEU_REPOSITORIO>
    cd <NOME_DO_SEU_REPOSITORIO>
    ```

2.  **Criação do Ambiente Virtual:**
    ```bash
    python -m venv venv
    ```

3.  **Ativação do Ambiente Virtual:**
    * **Windows:** `.\venv\Scripts\activate`
    * **macOS / Linux:** `source venv/bin/activate`

4.  **Estrutura de Arquivos e Dependências:**
    * Crie o arquivo `main.py` e insira o código do framework.
    * Crie o arquivo `requirements.txt` com o seguinte conteúdo:
        ```
        google-generativeai
        python-dotenv
        ```
    * Instale as dependências:
        ```bash
        pip install -r requirements.txt
        ```

## 5. Gerenciamento de Chave de API (Segurança)

**Atenção:** A segurança da sua chave de API é de máxima importância.

1.  **Crie um arquivo `.env`** na raiz do projeto.
2.  **Adicione a chave** ao arquivo da seguinte forma:
    ```
    GOOGLE_API_KEY="SUA_CHAVE_API_VEM_AQUI"
    ```
3.  **Confirme** que o arquivo `.gitignore` contém a linha `*.env` ou `.env` para garantir que este arquivo nunca seja versionado.

## 6. Personalização e Execução

1.  **Definição dos Agentes (Parte 3 do código):**
    * Em `main.py`, localize a "FÁBRICA DE AGENTES".
    * Defina a `nome_agente` e a `system_instruction` para moldar o comportamento, a personalidade e o formato de saída do seu agente.

2.  **Orquestração do Fluxo (Parte 4 do código):**
    * Localize a "ORQUESTRA".
    * Descomente e ajuste os fluxos de trabalho para definir qual agente (ou sequência de agentes) executará a tarefa.

3.  **Execução do Script:**
    ```bash
    python main.py
    ```
    O programa solicitará a tarefa inicial. Insira o comando e observe a execução.

## 7. Versionamento do Código (Git Workflow)

Após realizar alterações e confirmar o funcionamento:

1.  **Adicionar Alterações:**
    ```bash
    git add .
    ```
2.  **Criar um Commit:**
    ```bash
    git commit -m "Descreva a alteração que você fez"
    ```
3.  **Enviar para o GitHub:**
    ```bash
    git push
    ```